{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar fs = require(\"fs\");\n/**\n * Clase para leer y escribir datos en los archivos de usuario.\n */\n\n\nvar DataManager =\n/** @class */\nfunction () {\n  function DataManager() {}\n  /**\n   * Comprueba que una pareja de datos usuario-contrase침a exista\n   * y sea v치lida.\n   * @param user\n   * @param pwd\n   */\n\n\n  DataManager.checkCredentials = function (user, pwd) {\n    var valid = false;\n    this.data.forEach(function (u) {\n      if (u[0].toLowerCase() === user.toLowerCase() && u[1] === pwd) {\n        valid = true;\n        return;\n      }\n    });\n    return valid;\n  };\n  /**\n   * Devuelve un array con todos los amigos y sus estados.\n   *\n   * @param userName\n   */\n\n\n  DataManager.getFriends = function (userName) {\n    var _this = this;\n\n    return this.data.map(function (user) {\n      // Si encontramos el usuario\n      if (user[0] === userName) {\n        // Extraemos sus amigos\n        var friends_1 = Array(0);\n        user[3].split(',').map(function (friend) {\n          _this.data.map(function (u) {\n            if (u[0].toLowerCase() === friend) {\n              friends_1.push({\n                name: friend,\n                status: u[2]\n              });\n              return;\n            }\n          });\n        });\n        return friends_1;\n      }\n    }).filter(function (e) {\n      return e != null;\n    })[0];\n  };\n  /**\n   * Carga todos los datos disponibles\n   */\n\n\n  DataManager.loadAll = function () {\n    var temp = new Array(0);\n    fs.readFileSync('../data/users.txt', 'utf-8').split(\"\\n\").map(function (line) {\n      temp.push(line.split(\";\"));\n    });\n    return temp;\n  };\n\n  var _a;\n\n  _a = DataManager;\n  /**\n   * Busca en el archivo un nombre de usuario concreto\n   * @param userName Nombre de usuario a encontrar\n   */\n\n  DataManager.data = _a.loadAll();\n  return DataManager;\n}();\n\nconsole.log(DataManager.checkCredentials(\"Delmer\", \"delam3r\"));","map":{"version":3,"sources":["/home/david-bernal/Documentos/LearningTypescript/ReactApps/conversations/src/components/DataManager.js"],"names":["exports","__esModule","fs","require","DataManager","checkCredentials","user","pwd","valid","data","forEach","u","toLowerCase","getFriends","userName","_this","map","friends_1","Array","split","friend","push","name","status","filter","e","loadAll","temp","readFileSync","line","_a","console","log"],"mappings":"AAAA;;AACAA,OAAO,CAACC,UAAR,GAAqB,IAArB;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;AACA;AACA;AACA;;;AACA,IAAIC,WAAW;AAAG;AAAe,YAAY;AACzC,WAASA,WAAT,GAAuB,CACtB;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,WAAW,CAACC,gBAAZ,GAA+B,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAChD,QAAIC,KAAK,GAAG,KAAZ;AACA,SAAKC,IAAL,CAAUC,OAAV,CAAkB,UAAUC,CAAV,EAAa;AAC3B,UAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,WAAL,OAAuBN,IAAI,CAACM,WAAL,EAAvB,IACAD,CAAC,CAAC,CAAD,CAAD,KAASJ,GADb,EACkB;AACdC,QAAAA,KAAK,GAAG,IAAR;AACA;AACH;AACJ,KAND;AAOA,WAAOA,KAAP;AACH,GAVD;AAWA;AACJ;AACA;AACA;AACA;;;AACIJ,EAAAA,WAAW,CAACS,UAAZ,GAAyB,UAAUC,QAAV,EAAoB;AACzC,QAAIC,KAAK,GAAG,IAAZ;;AACA,WAAO,KAAKN,IAAL,CAAUO,GAAV,CAAc,UAAUV,IAAV,EAAgB;AACjC;AACA,UAAIA,IAAI,CAAC,CAAD,CAAJ,KAAYQ,QAAhB,EAA0B;AACtB;AACA,YAAIG,SAAS,GAAGC,KAAK,CAAC,CAAD,CAArB;AACAZ,QAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQa,KAAR,CAAc,GAAd,EAAmBH,GAAnB,CAAuB,UAAUI,MAAV,EAAkB;AACrCL,UAAAA,KAAK,CAACN,IAAN,CAAWO,GAAX,CAAe,UAAUL,CAAV,EAAa;AACxB,gBAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,WAAL,OAAuBQ,MAA3B,EAAmC;AAC/BH,cAAAA,SAAS,CAACI,IAAV,CAAe;AAAEC,gBAAAA,IAAI,EAAEF,MAAR;AAAgBG,gBAAAA,MAAM,EAAEZ,CAAC,CAAC,CAAD;AAAzB,eAAf;AACA;AACH;AACJ,WALD;AAMH,SAPD;AAQA,eAAOM,SAAP;AACH;AACJ,KAfM,EAeJO,MAfI,CAeG,UAAUC,CAAV,EAAa;AACnB,aAAOA,CAAC,IAAI,IAAZ;AACH,KAjBM,EAiBJ,CAjBI,CAAP;AAkBH,GApBD;AAqBA;AACJ;AACA;;;AACIrB,EAAAA,WAAW,CAACsB,OAAZ,GAAsB,YAAY;AAC9B,QAAIC,IAAI,GAAG,IAAIT,KAAJ,CAAU,CAAV,CAAX;AACAhB,IAAAA,EAAE,CAAC0B,YAAH,CAAgB,mBAAhB,EAAqC,OAArC,EACKT,KADL,CACW,IADX,EAEKH,GAFL,CAES,UAAUa,IAAV,EAAgB;AACrBF,MAAAA,IAAI,CAACN,IAAL,CAAUQ,IAAI,CAACV,KAAL,CAAW,GAAX,CAAV;AACH,KAJD;AAKA,WAAOQ,IAAP;AACH,GARD;;AASA,MAAIG,EAAJ;;AACAA,EAAAA,EAAE,GAAG1B,WAAL;AACA;AACJ;AACA;AACA;;AACIA,EAAAA,WAAW,CAACK,IAAZ,GAAmBqB,EAAE,CAACJ,OAAH,EAAnB;AACA,SAAOtB,WAAP;AACH,CAlEgC,EAAjC;;AAmEA2B,OAAO,CAACC,GAAR,CAAY5B,WAAW,CAACC,gBAAZ,CAA6B,QAA7B,EAAuC,SAAvC,CAAZ","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar fs = require(\"fs\");\n/**\n * Clase para leer y escribir datos en los archivos de usuario.\n */\nvar DataManager = /** @class */ (function () {\n    function DataManager() {\n    }\n    /**\n     * Comprueba que una pareja de datos usuario-contrase침a exista\n     * y sea v치lida.\n     * @param user\n     * @param pwd\n     */\n    DataManager.checkCredentials = function (user, pwd) {\n        var valid = false;\n        this.data.forEach(function (u) {\n            if (u[0].toLowerCase() === user.toLowerCase() &&\n                u[1] === pwd) {\n                valid = true;\n                return;\n            }\n        });\n        return valid;\n    };\n    /**\n     * Devuelve un array con todos los amigos y sus estados.\n     *\n     * @param userName\n     */\n    DataManager.getFriends = function (userName) {\n        var _this = this;\n        return this.data.map(function (user) {\n            // Si encontramos el usuario\n            if (user[0] === userName) {\n                // Extraemos sus amigos\n                var friends_1 = Array(0);\n                user[3].split(',').map(function (friend) {\n                    _this.data.map(function (u) {\n                        if (u[0].toLowerCase() === friend) {\n                            friends_1.push({ name: friend, status: u[2] });\n                            return;\n                        }\n                    });\n                });\n                return friends_1;\n            }\n        }).filter(function (e) {\n            return e != null;\n        })[0];\n    };\n    /**\n     * Carga todos los datos disponibles\n     */\n    DataManager.loadAll = function () {\n        var temp = new Array(0);\n        fs.readFileSync('../data/users.txt', 'utf-8')\n            .split(\"\\n\")\n            .map(function (line) {\n            temp.push(line.split(\";\"));\n        });\n        return temp;\n    };\n    var _a;\n    _a = DataManager;\n    /**\n     * Busca en el archivo un nombre de usuario concreto\n     * @param userName Nombre de usuario a encontrar\n     */\n    DataManager.data = _a.loadAll();\n    return DataManager;\n}());\nconsole.log(DataManager.checkCredentials(\"Delmer\", \"delam3r\"));\n"]},"metadata":{},"sourceType":"module"}