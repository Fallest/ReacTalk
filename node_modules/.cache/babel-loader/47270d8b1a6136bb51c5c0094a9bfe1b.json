{"ast":null,"code":"var _jsxFileName = \"/home/david-bernal/Documentos/LearningTypescript/ReactApps/conversations/src/components/MainPage.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport Conversations from './Conversations';\nimport LoginForm from './LoginForm';\n/**\n * Componente raíz para la página.\n * Aquí se renderizarán tanto el inicio de sesión como el chat.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/React.createContext(\"undefined\");\n\nfunction MainPage(props) {\n  _s();\n\n  // Estado de autenticación\n  const [userAuth, setUserAuth] = useState('false');\n  let user = \"\";\n\n  const setUser = name => {\n    user = name;\n  }; // Referencia del JSX a renderizar\n\n\n  const canvas = useRef( /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login-page\",\n    children: /*#__PURE__*/_jsxDEV(LoginForm, {\n      authUpdater: setUserAuth,\n      userSetter: setUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this)); // Contexto para el usuario\n  // Función para actualizar el componente que se va a mostrar si \n  // cambia el valor de userAuth.\n\n  function updateCanvas() {\n    if (userAuth) {\n      canvas.current = /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n        value: user,\n        children: /*#__PURE__*/_jsxDEV(Conversations, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this);\n    } else {\n      canvas.current = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Login-page\",\n        children: /*#__PURE__*/_jsxDEV(LoginForm, {\n          authUpdater: setUserAuth,\n          userSetter: setUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this);\n    }\n  } // Si cambia userAuth se llama a updateCanvas\n\n\n  useEffect(updateCanvas, [userAuth, user]);\n  return canvas.current;\n}\n\n_s(MainPage, \"dzCRY0mSw2gZyKONbNHKaTVLoPk=\");\n\n_c = MainPage;\nexport default MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"sources":["/home/david-bernal/Documentos/LearningTypescript/ReactApps/conversations/src/components/MainPage.tsx"],"names":["React","useState","useEffect","useRef","Conversations","LoginForm","UserContext","createContext","MainPage","props","userAuth","setUserAuth","user","setUser","name","canvas","updateCanvas","current"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,WAAW,gBAAGN,KAAK,CAACO,aAAN,CAAoB,WAApB,CAApB;;AAEP,SAASC,QAAT,CAAmBC,KAAnB,EAA+B;AAAA;;AAC3B;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,OAAD,CAAxC;AACA,MAAIW,IAAI,GAAG,EAAX;;AACA,QAAMC,OAAO,GAAIC,IAAD,IAAkB;AAC9BF,IAAAA,IAAI,GAAGE,IAAP;AACH,GAFD,CAJ2B,CAO3B;;;AACA,QAAMC,MAAM,GAAGZ,MAAM,eACjB;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACI,QAAC,SAAD;AAAW,MAAA,WAAW,EAAEQ,WAAxB;AAAqC,MAAA,UAAU,EAAEE;AAAjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADiB,CAArB,CAR2B,CAa3B;AAEA;AACA;;AACA,WAASG,YAAT,GAAyB;AACrB,QAAIN,QAAJ,EAAc;AACVK,MAAAA,MAAM,CAACE,OAAP,gBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,QAAA,KAAK,EAAEL,IAA7B;AAAA,+BACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KAND,MAMO;AACHG,MAAAA,MAAM,CAACE,OAAP,gBACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI,QAAC,SAAD;AAAW,UAAA,WAAW,EAAEN,WAAxB;AAAqC,UAAA,UAAU,EAAEE;AAAjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ,GA/B0B,CAiC3B;;;AACAX,EAAAA,SAAS,CAACc,YAAD,EAAe,CAACN,QAAD,EAAWE,IAAX,CAAf,CAAT;AAEA,SAAOG,MAAM,CAACE,OAAd;AACH;;GArCQT,Q;;KAAAA,Q;AAuCT,eAAeA,QAAf","sourcesContent":["import * as React from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport Conversations from './Conversations'\nimport LoginForm from './LoginForm'\n\n/**\n * Componente raíz para la página.\n * Aquí se renderizarán tanto el inicio de sesión como el chat.\n */\n\nexport const UserContext = React.createContext(\"undefined\");\n\nfunction MainPage (props: any) {\n    // Estado de autenticación\n    const [userAuth, setUserAuth] = useState('false')\n    let user = \"\"\n    const setUser = (name: string) => {\n        user = name\n    }\n    // Referencia del JSX a renderizar\n    const canvas = useRef(\n        <div className=\"Login-page\">\n            <LoginForm authUpdater={setUserAuth} userSetter={setUser} />\n        </div>\n    )\n    // Contexto para el usuario\n\n    // Función para actualizar el componente que se va a mostrar si \n    // cambia el valor de userAuth.\n    function updateCanvas()  {\n        if (userAuth) {\n            canvas.current = (\n                <UserContext.Provider value={user}>\n                    <Conversations />\n                </UserContext.Provider>\n            )\n        } else {\n            canvas.current = (\n                <div className=\"Login-page\">\n                    <LoginForm authUpdater={setUserAuth} userSetter={setUser} />\n                </div>\n            )\n        }\n    }\n\n    // Si cambia userAuth se llama a updateCanvas\n    useEffect(updateCanvas, [userAuth, user])\n\n    return canvas.current\n}\n\nexport default MainPage"]},"metadata":{},"sourceType":"module"}