{"ast":null,"code":"var _jsxFileName = \"/home/david-bernal/Documentos/LearningTypescript/ReactApps/conversations/src/components/LoginForm.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport DataManager from \"./DataManager\";\n/**\n * Componente para el formulario de inicio de sesión.\n * Está compuesto de dos áreas de texto y un botón.\n * Cuando se presione el botón se realizará un intento de inicio de sesión:\n *  -Se recogerán los datos de los campos de texto.\n *  -Se contrastarán con los usuarios guardados.\n *      >Si el usuario no existe: Error.\n *      >Si el usuario existe pero está online: Error:\n *      >Si el usuario existe y está offline: Iniciar sesión.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm(props) {\n  _s();\n\n  const [userName, setUserName] = useState(\"\");\n  const [pwd, setPwd] = useState(\"\");\n\n  function tryLogin() {\n    // Comparamos los datos introducidos con los datos en el archivo\n    if (DataManager.checkCredentials(userName.toLowerCase(), pwd)) {\n      // Inicio de sesión correcto:\n      // Actualizamos el valor de userAuth y cambiamos el estado del usuario a \"online\"\n      props.userSetter(userName);\n      props.authUpdater(true);\n      DataManager.logIn(userName);\n    }\n  }\n\n  const performValidation = () => {\n    return userName.length > 0 && pwd.length > 0;\n  };\n\n  const handleUserChange = event => {\n    setUserName(event.target.value);\n  };\n\n  const handlePwdChange = event => {\n    setPwd(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Conversations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: tryLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"User \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: handleUserChange,\n        value: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        onChange: handlePwdChange,\n        value: pwd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"login-button\",\n        type: \"submit\",\n        value: \"Log in\",\n        disabled: !performValidation()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginForm, \"UFVmZiT23on6SIFoEm+rE427bTw=\");\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/home/david-bernal/Documentos/LearningTypescript/ReactApps/conversations/src/components/LoginForm.tsx"],"names":["React","useState","DataManager","LoginForm","props","userName","setUserName","pwd","setPwd","tryLogin","checkCredentials","toLowerCase","userSetter","authUpdater","logIn","performValidation","length","handleUserChange","event","target","value","handlePwdChange"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA+B;AAAA;;AAC5C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAAC,EAAD,CAA9B;;AAEA,WAASQ,QAAT,GAAoB;AAClB;AACA,QAAIP,WAAW,CAACQ,gBAAZ,CAA6BL,QAAQ,CAACM,WAAT,EAA7B,EAAqDJ,GAArD,CAAJ,EAA+D;AAC7D;AACA;AACAH,MAAAA,KAAK,CAACQ,UAAN,CAAiBP,QAAjB;AACAD,MAAAA,KAAK,CAACS,WAAN,CAAkB,IAAlB;AAEAX,MAAAA,WAAW,CAACY,KAAZ,CAAkBT,QAAlB;AACD;AACF;;AAED,QAAMU,iBAAiB,GAAG,MAAM;AAC9B,WAAOV,QAAQ,CAACW,MAAT,GAAkB,CAAlB,IAAuBT,GAAG,CAACS,MAAJ,GAAa,CAA3C;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAIC,KAAD,IAAgB;AACvCZ,IAAAA,WAAW,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAX;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAIH,KAAD,IAAgB;AACtCV,IAAAA,MAAM,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAN;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAEX,QAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAEQ,gBAA7B;AAA+C,QAAA,KAAK,EAAEZ;AAAtD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,QAAQ,EAAEgB,eAAjC;AAAkD,QAAA,KAAK,EAAEd;AAAzD;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AACE,QAAA,SAAS,EAAC,cADZ;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAC,QAHR;AAIE,QAAA,QAAQ,EAAE,CAACQ,iBAAiB;AAJ9B;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA/CuBZ,S;;KAAAA,S","sourcesContent":["import * as React from \"react\";\nimport { useState } from \"react\";\nimport DataManager from \"./DataManager\";\n/**\n * Componente para el formulario de inicio de sesión.\n * Está compuesto de dos áreas de texto y un botón.\n * Cuando se presione el botón se realizará un intento de inicio de sesión:\n *  -Se recogerán los datos de los campos de texto.\n *  -Se contrastarán con los usuarios guardados.\n *      >Si el usuario no existe: Error.\n *      >Si el usuario existe pero está online: Error:\n *      >Si el usuario existe y está offline: Iniciar sesión.\n */\nexport default function LoginForm(props: any) {\n  const [userName, setUserName] = useState(\"\");\n  const [pwd, setPwd] = useState(\"\");\n\n  function tryLogin() {\n    // Comparamos los datos introducidos con los datos en el archivo\n    if (DataManager.checkCredentials(userName.toLowerCase(), pwd)) {\n      // Inicio de sesión correcto:\n      // Actualizamos el valor de userAuth y cambiamos el estado del usuario a \"online\"\n      props.userSetter(userName);\n      props.authUpdater(true);\n\n      DataManager.logIn(userName);\n    }\n  }\n\n  const performValidation = () => {\n    return userName.length > 0 && pwd.length > 0;\n  };\n\n  const handleUserChange = (event: any) => {\n    setUserName(event.target.value);\n  };\n\n  const handlePwdChange = (event: any) => {\n    setPwd(event.target.value);\n  };\n\n  return (\n    <div className=\"Login-form\">\n      <h1>Conversations</h1>\n      <form onSubmit={tryLogin}>\n        <label>User </label>\n        <input type=\"text\" onChange={handleUserChange} value={userName} />\n        <br />\n        <label>Password </label>\n        <input type=\"password\" onChange={handlePwdChange} value={pwd} />\n        <br />\n        <input\n          className=\"login-button\"\n          type=\"submit\"\n          value=\"Log in\"\n          disabled={!performValidation()}\n        />\n      </form>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}