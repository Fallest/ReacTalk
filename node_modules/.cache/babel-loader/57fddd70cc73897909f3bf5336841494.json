{"ast":null,"code":"var _jsxFileName = \"/home/david-bernal/Documentos/LearningTypescript/ReactApps/conversations/src/components/LoginForm.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useState } from 'react';\n/**\n * Componente para el formulario de inicio de sesión.\n * Está compuesto de dos áreas de texto y un botón.\n * Cuando se presione el botón se realizará un intento de inicio de sesión:\n *  -Se recogerán los datos de los campos de texto.\n *  -Se contrastarán con los usuarios guardados.\n *      >Si el usuario no existe: Error.\n *      >Si el usuario existe pero está online: Error:\n *      >Si el usuario existe y está offline: Iniciar sesión.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm(props) {\n  _s();\n\n  const [user, setUser] = useState(\"\");\n  const [pwd, setPwd] = useState(\"\");\n\n  function tryLogin() {\n    // Comparamos los datos introducidos con los datos en el archivo\n    if (user === \"admin\" && pwd === \"admin\") {\n      // Inicio de sesión correcto\n      props.authUpdater('true');\n    }\n  }\n\n  function componentDidUpdate() {// Si el inicio de sesión falla, se rerenderiza el componente\n    // y se muestra un mensaje de error\n  }\n\n  const performValidation = () => {\n    return user.length > 0 && pwd.length > 0;\n  };\n\n  const handleUserChange = event => {\n    setUser(event.target.value);\n  };\n\n  const handlePwdChange = event => {\n    setPwd(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Login-form\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: tryLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"User \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: handleUserChange,\n        value: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Password \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        onChange: handlePwdChange,\n        value: pwd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Log in\",\n        disabled: !performValidation()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LoginForm, \"VdVwgvRxVLr1OwtifevSu7GRne0=\");\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/home/david-bernal/Documentos/LearningTypescript/ReactApps/conversations/src/components/LoginForm.tsx"],"names":["React","useState","LoginForm","props","user","setUser","pwd","setPwd","tryLogin","authUpdater","componentDidUpdate","performValidation","length","handleUserChange","event","target","value","handlePwdChange"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA+B;AAAA;;AAC3C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,EAAD,CAA9B;;AAEA,WAASO,QAAT,GAAqB;AACjB;AACA,QAAIJ,IAAI,KAAK,OAAT,IAAoBE,GAAG,KAAK,OAAhC,EAAyC;AACrC;AACAH,MAAAA,KAAK,CAACM,WAAN,CAAkB,MAAlB;AACH;AACJ;;AAED,WAASC,kBAAT,GAA8B,CAC1B;AACA;AACH;;AAED,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,WAAOP,IAAI,CAACQ,MAAL,GAAc,CAAd,IAAmBN,GAAG,CAACM,MAAJ,GAAa,CAAvC;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAIC,KAAD,IAAgB;AACrCT,IAAAA,OAAO,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACH,GAFD;;AAIA,QAAMC,eAAe,GAAIH,KAAD,IAAgB;AACpCP,IAAAA,MAAM,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAN;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAER,QAAhB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAEK,gBAA7B;AACA,QAAA,KAAK,EAAET;AADP;AAAA;AAAA;AAAA;AAAA,cAFJ,eAII;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,QAAQ,EAAEa,eAAjC;AACA,QAAA,KAAK,EAAEX;AADP;AAAA;AAAA;AAAA;AAAA,cANJ,eAQI;AAAA;AAAA;AAAA;AAAA,cARJ,eASI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,QAA3B;AAAoC,QAAA,QAAQ,EAAE,CAACK,iBAAiB;AAAhE;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GA5CwBT,S;;KAAAA,S","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n/**\n * Componente para el formulario de inicio de sesión.\n * Está compuesto de dos áreas de texto y un botón.\n * Cuando se presione el botón se realizará un intento de inicio de sesión:\n *  -Se recogerán los datos de los campos de texto.\n *  -Se contrastarán con los usuarios guardados.\n *      >Si el usuario no existe: Error.\n *      >Si el usuario existe pero está online: Error:\n *      >Si el usuario existe y está offline: Iniciar sesión.\n */\n export default function LoginForm(props: any) {\n    const [user, setUser] = useState(\"\")\n    const [pwd, setPwd] = useState(\"\")\n\n    function tryLogin () {\n        // Comparamos los datos introducidos con los datos en el archivo\n        if (user === \"admin\" && pwd === \"admin\") {\n            // Inicio de sesión correcto\n            props.authUpdater('true')\n        }\n    }\n\n    function componentDidUpdate() {\n        // Si el inicio de sesión falla, se rerenderiza el componente\n        // y se muestra un mensaje de error\n    }\n    \n    const performValidation = () => {\n        return user.length > 0 && pwd.length > 0\n    }\n\n    const handleUserChange = (event: any) => {\n        setUser(event.target.value)\n    }\n\n    const handlePwdChange = (event: any) => {\n        setPwd(event.target.value)\n    }\n\n    return(\n        <div className=\"Login-form\">\n            <form onSubmit={tryLogin}>\n                <label>User </label>\n                <input type=\"text\" onChange={handleUserChange} \n                value={user} />\n                <br />\n                <label>Password </label>\n                <input type=\"password\" onChange={handlePwdChange}\n                value={pwd} />\n                <br />\n                <input type=\"submit\" value=\"Log in\" disabled={!performValidation()}/>\n            </form>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}